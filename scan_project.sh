#!/bin/bash

# –°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Å–µ—Ö –æ–±—Ä–∞–∑–æ–≤ –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ Harbor

# –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
CONFIG_FILE="$SCRIPT_DIR/harbor.conf"

if [ -f "$CONFIG_FILE" ]; then
    source "$CONFIG_FILE"
else
    echo "‚ùå –§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: $CONFIG_FILE"
    echo "–°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª harbor.conf —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Harbor"
    exit 1
fi

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã
if [ $# -eq 0 ]; then
    echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 <project_name> [--force]"
    echo ""
    echo "–ü—Ä–∏–º–µ—Ä—ã:"
    echo "  $0 library"
    echo "  $0 test_project"
    echo "  $0 library --force"
    echo ""
    echo "–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã:"
    curl -s -u "$USERNAME:$PASSWORD" "$HARBOR_URL/api/v2.0/projects" | jq -r '.[].name'
    exit 1
fi

PROJECT_NAME=$1
FORCE_SCAN=false

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–ª–∞–≥ --force
if [ "$2" = "--force" ]; then
    FORCE_SCAN=true
    echo "üîç –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –æ–±—Ä–∞–∑–æ–≤ –≤ –ø—Ä–æ–µ–∫—Ç–µ: $PROJECT_NAME"
else
    echo "üîç –ó–∞–ø—É—Å–∫ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Å–µ—Ö –æ–±—Ä–∞–∑–æ–≤ –≤ –ø—Ä–æ–µ–∫—Ç–µ: $PROJECT_NAME"
fi

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø—Ä–æ–µ–∫—Ç
project_exists=$(curl -s -u "$USERNAME:$PASSWORD" "$HARBOR_URL/api/v2.0/projects" | jq -r --arg project "$PROJECT_NAME" '.[] | select(.name == $project) | .name')

if [ -z "$project_exists" ]; then
    echo "‚ùå –ü—Ä–æ–µ–∫—Ç '$PROJECT_NAME' –Ω–µ –Ω–∞–π–¥–µ–Ω!"
    echo ""
    echo "–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã:"
    curl -s -u "$USERNAME:$PASSWORD" "$HARBOR_URL/api/v2.0/projects" | jq -r '.[].name'
    exit 1
fi

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –æ–±—Ä–∞–∑–∞
scan_artifact() {
    local project=$1
    local repo=$2
    local digest=$3
    
    echo "üì¶ –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ: $project/$repo@${digest:0:19}..."
    
    response=$(curl -s -X POST -u "$USERNAME:$PASSWORD" \
        -H "Content-Type: application/json" \
        -H "X-Requested-With: XMLHttpRequest" \
        -d '{}' \
        "$HARBOR_URL/api/v2.0/projects/$project/repositories/$repo/artifacts/$digest/scan")
    
    if [ $? -eq 0 ]; then
        echo "‚úÖ –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ –¥–ª—è $project/$repo@${digest:0:19}..."
        return 0
    else
        echo "‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è $project/$repo@${digest:0:19}..."
        return 1
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –æ–±—Ä–∞–∑–∞
check_artifact_scan() {
    local project=$1
    local repo=$2
    local digest=$3
    
    local scan_info=$(curl -s -u "$USERNAME:$PASSWORD" \
        "$HARBOR_URL/api/v2.0/projects/$project/repositories/$repo/artifacts/$digest?with_scan_overview=true" | \
        jq -r '.scan_overview."application/vnd.security.vulnerability.report; version=1.1"')
    
    if [ "$scan_info" != "null" ]; then
        local status=$(echo "$scan_info" | jq -r '.scan_status')
        case $status in
            "Success")
                local summary=$(echo "$scan_info" | jq -r '.summary')
                local total=$(echo "$summary" | jq -r '.total')
                local high=$(echo "$summary" | jq -r '.summary.High // 0')
                local medium=$(echo "$summary" | jq -r '.summary.Medium // 0')
                local low=$(echo "$summary" | jq -r '.summary.Low // 0')
                if [ "$FORCE_SCAN" = true ]; then
                    echo "üîÑ $project/$repo@${digest:0:19}... - –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø–µ—Ä–µ—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ (–±—ã–ª–æ: $total —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π)"
                    return 0  # –ó–∞–ø—É—Å—Ç–∏–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
                else
                    echo "‚úÖ $project/$repo@${digest:0:19}... - –£–∂–µ –æ—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω (–£—è–∑–≤–∏–º–æ—Å—Ç–µ–π: $total, H:$high M:$medium L:$low)"
                    return 1  # –£–∂–µ –æ—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω
                fi
                ;;
            "Running")
                if [ "$FORCE_SCAN" = true ]; then
                    echo "üîÑ $project/$repo@${digest:0:19}... - –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø–µ—Ä–µ—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ (–±—ã–ª–æ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è)"
                    return 0  # –ó–∞–ø—É—Å—Ç–∏–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
                else
                    echo "üîÑ $project/$repo@${digest:0:19}... - –£–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è"
                    return 1  # –£–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è
                fi
                ;;
            "Error")
                echo "‚ùå $project/$repo@${digest:0:19}... - –û—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è, –ø–æ–ø—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑"
                return 0  # –ü–æ–ø—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑
                ;;
            *)
                echo "‚ÑπÔ∏è  $project/$repo@${digest:0:19}... - –°—Ç–∞—Ç—É—Å: $status"
                return 0  # –ü–æ–ø—Ä–æ–±—É–µ–º –∑–∞–ø—É—Å—Ç–∏—Ç—å
                ;;
        esac
    else
        echo "‚ö†Ô∏è  $project/$repo@${digest:0:19}... - –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏"
        return 0  # –ó–∞–ø—É—Å—Ç–∏–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
    fi
}

echo "üèóÔ∏è  –ü—Ä–æ–µ–∫—Ç: $PROJECT_NAME"

# –ü–æ–ª—É—á–∞–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞
repos=$(curl -s -u "$USERNAME:$PASSWORD" "$HARBOR_URL/api/v2.0/projects/$PROJECT_NAME/repositories" | jq -r '.[].name')

if [ -z "$repos" ]; then
    echo "‚ùå –í –ø—Ä–æ–µ–∫—Ç–µ '$PROJECT_NAME' –Ω–µ—Ç —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤!"
    exit 1
fi

total_scanned=0
already_scanned=0
errors=0

for repo in $repos; do
    repo_name=$(echo $repo | sed "s/$PROJECT_NAME\///")
    echo ""
    echo "  üì¶ –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π: $repo_name"
    
    # –ü–æ–ª—É—á–∞–µ–º –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
    artifacts=$(curl -s -u "$USERNAME:$PASSWORD" "$HARBOR_URL/api/v2.0/projects/$PROJECT_NAME/repositories/$repo_name/artifacts" | jq -r '.[].digest')
    
    if [ -z "$artifacts" ]; then
        echo "    ‚ö†Ô∏è  –í —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ –Ω–µ—Ç –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤"
        continue
    fi
    
    for digest in $artifacts; do
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
        if check_artifact_scan "$PROJECT_NAME" "$repo_name" "$digest"; then
            # –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
            if scan_artifact "$PROJECT_NAME" "$repo_name" "$digest"; then
                total_scanned=$((total_scanned + 1))
            else
                errors=$((errors + 1))
            fi
        else
            already_scanned=$((already_scanned + 1))
        fi
        
        sleep 1  # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
    done
done

echo ""
echo "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞ '$PROJECT_NAME':"
echo "  –ù–æ–≤—ã—Ö —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–π –∑–∞–ø—É—â–µ–Ω–æ: $total_scanned"
echo "  –£–∂–µ –æ—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ/–≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è: $already_scanned"
echo "  –û—à–∏–±–æ–∫: $errors"
echo "  –í—Å–µ–≥–æ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤: $((total_scanned + already_scanned + errors))"

if [ $total_scanned -gt 0 ]; then
    echo ""
    echo "üí° –î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:"
    echo "   ./check_scan_status.sh"
fi

echo "‚úÖ –ì–æ—Ç–æ–≤–æ!"
