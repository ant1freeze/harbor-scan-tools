#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Å–µ—Ö –æ–±—Ä–∞–∑–æ–≤ –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ Harbor
"""

import requests
import json
import sys
import time
import argparse
from typing import List, Dict, Any

class HarborProjectScanner:
    def __init__(self, base_url: str, username: str = "admin", password: str = "Harbor12345"):
        self.base_url = base_url.rstrip('/')
        self.username = username
        self.password = password
        self.session = requests.Session()
        self.session.auth = (username, password)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        self._test_connection()
    
    def _test_connection(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Harbor"""
        try:
            response = self.session.get(f"{self.base_url}/api/v2.0/systeminfo")
            if response.status_code == 200:
                print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Harbor: {self.base_url}")
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Harbor: {response.status_code}")
                sys.exit(1)
        except requests.exceptions.RequestException as e:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Harbor: {e}")
            sys.exit(1)
    
    def get_projects(self) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤"""
        try:
            response = self.session.get(f"{self.base_url}/api/v2.0/projects")
            response.raise_for_status()
            return response.json()
        except requests.exceptions.RequestException as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–æ–≤: {e}")
            return []
    
    def get_project_repositories(self, project_name: str) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ –≤ –ø—Ä–æ–µ–∫—Ç–µ"""
        try:
            response = self.session.get(f"{self.base_url}/api/v2.0/projects/{project_name}/repositories")
            response.raise_for_status()
            return response.json()
        except requests.exceptions.RequestException as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ {project_name}: {e}")
            return []
    
    def get_repository_artifacts(self, project_name: str, repository_name: str) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏"""
        repo_name = repository_name.replace(f"{project_name}/", "")
        try:
            response = self.session.get(f"{self.base_url}/api/v2.0/projects/{project_name}/repositories/{repo_name}/artifacts")
            response.raise_for_status()
            return response.json()
        except requests.exceptions.RequestException as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤ –¥–ª—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è {repository_name}: {e}")
            return []
    
    def get_scan_status(self, project_name: str, repository_name: str, artifact_digest: str) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç—É—Å —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞"""
        repo_name = repository_name.replace(f"{project_name}/", "")
        try:
            response = self.session.get(f"{self.base_url}/api/v2.0/projects/{project_name}/repositories/{repo_name}/artifacts/{artifact_digest}?with_scan_overview=true")
            response.raise_for_status()
            data = response.json()
            scan_overview = data.get('scan_overview', {})
            return scan_overview.get('application/vnd.security.vulnerability.report; version=1.1', {})
        except requests.exceptions.RequestException as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è {repository_name}: {e}")
            return {}
    
    def scan_artifact(self, project_name: str, repository_name: str, artifact_digest: str) -> bool:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞"""
        repo_name = repository_name.replace(f"{project_name}/", "")
        url = f"{self.base_url}/api/v2.0/projects/{project_name}/repositories/{repo_name}/artifacts/{artifact_digest}/scan"
        
        try:
            headers = {
                'Content-Type': 'application/json',
                'X-Requested-With': 'XMLHttpRequest'
            }
            response = self.session.post(url, json={}, headers=headers)
            
            if response.status_code == 202:
                print(f"‚úÖ –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ –¥–ª—è {repository_name}@{artifact_digest[:19]}...")
                return True
            elif response.status_code == 409:
                print(f"‚ö†Ô∏è  –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –¥–ª—è {repository_name}@{artifact_digest[:19]}...")
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è {repository_name}: {response.status_code}")
                return False
        except requests.exceptions.RequestException as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è {repository_name}: {e}")
            return False
    
    def scan_project(self, project_name: str, force_rescan: bool = False) -> Dict[str, int]:
        """–°–∫–∞–Ω–∏—Ä—É–µ—Ç –≤—Å–µ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã –≤ –ø—Ä–æ–µ–∫—Ç–µ"""
        print(f"üîç –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –æ–±—Ä–∞–∑–æ–≤ –≤ –ø—Ä–æ–µ–∫—Ç–µ: {project_name}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø—Ä–æ–µ–∫—Ç
        projects = self.get_projects()
        project_exists = any(p.get('name') == project_name for p in projects)
        
        if not project_exists:
            print(f"‚ùå –ü—Ä–æ–µ–∫—Ç '{project_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            print("–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã:")
            for project in projects:
                print(f"  - {project.get('name', 'N/A')}")
            return {}
        
        stats = {
            'total_artifacts': 0,
            'new_scans': 0,
            'already_scanned': 0,
            'already_running': 0,
            'errors': 0
        }
        
        print(f"üèóÔ∏è  –ü—Ä–æ–µ–∫—Ç: {project_name}")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞
        repos = self.get_project_repositories(project_name)
        if not repos:
            print(f"‚ùå –í –ø—Ä–æ–µ–∫—Ç–µ '{project_name}' –Ω–µ—Ç —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤!")
            return stats
        
        for repo in repos:
            repo_name = repo.get('name', 'N/A')
            print(f"\n  üì¶ –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π: {repo_name}")
            
            # –ü–æ–ª—É—á–∞–µ–º –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
            artifacts = self.get_repository_artifacts(project_name, repo_name)
            if not artifacts:
                print(f"    ‚ö†Ô∏è  –í —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ –Ω–µ—Ç –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤")
                continue
            
            print(f"    –ù–∞–π–¥–µ–Ω–æ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤: {len(artifacts)}")
            
            for artifact in artifacts:
                digest = artifact.get('digest', '')
                if not digest:
                    continue
                
                stats['total_artifacts'] += 1
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
                scan_info = self.get_scan_status(project_name, repo_name, digest)
                
                if scan_info:
                    status = scan_info.get('scan_status', '')
                    
                    if status == 'Success':
                        if not force_rescan:
                            summary = scan_info.get('summary', {})
                            total = summary.get('total', 0)
                            high = summary.get('summary', {}).get('High', 0)
                            medium = summary.get('summary', {}).get('Medium', 0)
                            low = summary.get('summary', {}).get('Low', 0)
                            print(f"    ‚úÖ {repo_name}@{digest[:19]}... - –£–∂–µ –æ—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω (–£—è–∑–≤–∏–º–æ—Å—Ç–µ–π: {total}, H:{high} M:{medium} L:{low})")
                            stats['already_scanned'] += 1
                            continue
                        else:
                            print(f"    üîÑ {repo_name}@{digest[:19]}... - –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø–µ—Ä–µ—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ")
                    elif status == 'Running':
                        print(f"    üîÑ {repo_name}@{digest[:19]}... - –£–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è")
                        stats['already_running'] += 1
                        continue
                    elif status == 'Error':
                        print(f"    ‚ùå {repo_name}@{digest[:19]}... - –û—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è, –ø–æ–ø—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑")
                    else:
                        print(f"    ‚ÑπÔ∏è  {repo_name}@{digest[:19]}... - –°—Ç–∞—Ç—É—Å: {status}")
                else:
                    print(f"    ‚ö†Ô∏è  {repo_name}@{digest[:19]}... - –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏")
                
                # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
                if self.scan_artifact(project_name, repo_name, digest):
                    stats['new_scans'] += 1
                else:
                    stats['errors'] += 1
                
                time.sleep(1)  # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
        
        return stats

def main():
    parser = argparse.ArgumentParser(description='–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–∑–æ–≤ –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ Harbor')
    parser.add_argument('project', help='–ò–º—è –ø—Ä–æ–µ–∫—Ç–∞ –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è')
    parser.add_argument('--url', default='http://localhost:8080', 
                       help='URL Harbor (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: http://localhost:8080)')
    parser.add_argument('--username', default='admin', 
                       help='–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: admin)')
    parser.add_argument('--password', default='Harbor12345', 
                       help='–ü–∞—Ä–æ–ª—å (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: Harbor12345)')
    parser.add_argument('--force', action='store_true', 
                       help='–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø–µ—Ä–µ—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É–∂–µ –æ—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –æ–±—Ä–∞–∑–æ–≤')
    
    args = parser.parse_args()
    
    try:
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç Harbor Scanner
        scanner = HarborProjectScanner(args.url, args.username, args.password)
        
        # –°–∫–∞–Ω–∏—Ä—É–µ–º –ø—Ä–æ–µ–∫—Ç
        stats = scanner.scan_project(args.project, args.force)
        
        if stats:
            print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞ '{args.project}':")
            print(f"  –í—Å–µ–≥–æ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤: {stats['total_artifacts']}")
            print(f"  –ù–æ–≤—ã—Ö —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–π –∑–∞–ø—É—â–µ–Ω–æ: {stats['new_scans']}")
            print(f"  –£–∂–µ –æ—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ: {stats['already_scanned']}")
            print(f"  –£–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è: {stats['already_running']}")
            print(f"  –û—à–∏–±–æ–∫: {stats['errors']}")
            
            if stats['new_scans'] > 0:
                print(f"\nüí° –î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:")
                print(f"   ./check_scan_status.sh")
        
        print("\n‚úÖ –ì–æ—Ç–æ–≤–æ!")
        
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è  –û–ø–µ—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()
