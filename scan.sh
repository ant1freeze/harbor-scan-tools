#!/bin/bash

# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –æ–±—Ä–∞–∑–æ–≤ –≤ Harbor
# –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤ –∏ –≤—Å–µ—Ö –æ–±—Ä–∞–∑–æ–≤

# –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
CONFIG_FILE="$SCRIPT_DIR/harbor.conf"

if [ -f "$CONFIG_FILE" ]; then
    source "$CONFIG_FILE"
else
    echo "‚ùå –§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: $CONFIG_FILE"
    echo "–°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª harbor.conf —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Harbor"
    exit 1
fi

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏
show_help() {
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤
    SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
    CONFIG_FILE="$SCRIPT_DIR/harbor.conf"
    if [ -f "$CONFIG_FILE" ]; then
        source "$CONFIG_FILE"
    fi
    
    echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 [–û–ü–¶–ò–ò] [–ü–†–û–ï–ö–¢]"
    echo ""
    echo "–û–ü–¶–ò–ò:"
    echo "  --all, -a          –°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ –æ–±—Ä–∞–∑—ã –≤–æ –≤—Å–µ—Ö –ø—Ä–æ–µ–∫—Ç–∞—Ö"
    echo "  --force, -f        –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ (–ø–µ—Ä–µ—Å–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —É–∂–µ –æ—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ)"
    echo "  --help, -h         –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É"
    echo ""
    echo "–ü–†–û–ï–ö–¢:"
    echo "  –ò–º—è –ø—Ä–æ–µ–∫—Ç–∞ –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è (–µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω --all)"
    echo ""
    echo "–ü–†–ò–ú–ï–†–´:"
    echo "  $0 library                    # –°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–µ–∫—Ç library"
    echo "  $0 library --force            # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–µ–∫—Ç library"
    echo "  $0 --all                      # –°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ –ø—Ä–æ–µ–∫—Ç—ã (—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º)"
    echo "  $0 --all --force              # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ –ø—Ä–æ–µ–∫—Ç—ã"
    echo ""
    echo "–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã:"
    get_all_paginated "$HARBOR_URL/api/v2.0/projects" | jq -r '.name' 2>/dev/null || echo "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
get_all_paginated() {
    local url=$1
    local page_size=${2:-100}
    local all_data=""
    local page=1
    
    while true; do
        local current_url="${url}?page=${page}&page_size=${page_size}"
        local response=$(curl -s -H "Authorization: Basic $AUTH_TOKEN" "$current_url")
        
        if [ $? -ne 0 ]; then
            echo "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö —Å —Å—Ç—Ä–∞–Ω–∏—Ü—ã $page" >&2
            return 1
        fi
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –Ω–∞ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        local page_data=$(echo "$response" | jq -r '.[]' 2>/dev/null)
        if [ -z "$page_data" ] || [ "$page_data" = "null" ]; then
            break
        fi
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∫ –æ–±—â–µ–º—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É
        if [ -z "$all_data" ]; then
            all_data="$page_data"
        else
            all_data="$all_data
$page_data"
        fi
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
        local next_link=$(curl -s -I -H "Authorization: Basic $AUTH_TOKEN" "$current_url" | grep -i "link:" | grep -o 'rel="next"' || true)
        if [ -z "$next_link" ]; then
            break
        fi
        
        page=$((page + 1))
    done
    
    echo "$all_data"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –æ–±—Ä–∞–∑–∞
scan_artifact() {
    local project=$1
    local repo=$2
    local digest=$3
    
    echo "üì¶ –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ: $project/$repo@${digest:0:19}..."
    
    response=$(curl -s -X POST -H "Authorization: Basic $AUTH_TOKEN" \
        -H "Content-Type: application/json" \
        -H "X-Requested-With: XMLHttpRequest" \
        -d '{}' \
        "$HARBOR_URL/api/v2.0/projects/$project/repositories/$repo/artifacts/$digest/scan")
    
    if [ $? -eq 0 ]; then
        echo "‚úÖ –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ –¥–ª—è $project/$repo@${digest:0:19}..."
        return 0
    else
        echo "‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è $project/$repo@${digest:0:19}..."
        return 1
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –æ–±—Ä–∞–∑–∞
check_artifact_scan() {
    local project=$1
    local repo=$2
    local digest=$3
    
    local scan_info=$(curl -s -H "Authorization: Basic $AUTH_TOKEN" \
        "$HARBOR_URL/api/v2.0/projects/$project/repositories/$repo/artifacts/$digest?with_scan_overview=true" | \
        jq -r '.scan_overview."application/vnd.security.vulnerability.report; version=1.1"')
    
    if [ "$scan_info" != "null" ]; then
        local status=$(echo "$scan_info" | jq -r '.scan_status')
        case $status in
            "Success")
                local summary=$(echo "$scan_info" | jq -r '.summary')
                local total=$(echo "$summary" | jq -r '.total')
                local high=$(echo "$summary" | jq -r '.summary.High // 0')
                local medium=$(echo "$summary" | jq -r '.summary.Medium // 0')
                local low=$(echo "$summary" | jq -r '.summary.Low // 0')
                local critical=$(echo "$summary" | jq -r '.summary.Critical // 0')
                
                if [ "$FORCE_SCAN" = true ]; then
                    echo "üîÑ $project/$repo@${digest:0:19}... - –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø–µ—Ä–µ—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ (–±—ã–ª–æ: $total —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π)"
                    return 0  # –ó–∞–ø—É—Å—Ç–∏–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
                else
                    echo "‚úÖ $project/$repo@${digest:0:19}... - –£–∂–µ –æ—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω (–£—è–∑–≤–∏–º–æ—Å—Ç–µ–π: $total, C:$critical H:$high M:$medium L:$low)"
                    return 1  # –£–∂–µ –æ—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω
                fi
                ;;
            "Running")
                if [ "$FORCE_SCAN" = true ]; then
                    echo "üîÑ $project/$repo@${digest:0:19}... - –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø–µ—Ä–µ—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ (–±—ã–ª–æ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è)"
                    return 0  # –ó–∞–ø—É—Å—Ç–∏–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
                else
                    echo "üîÑ $project/$repo@${digest:0:19}... - –£–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è"
                    return 1  # –£–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è
                fi
                ;;
            "Error")
                echo "‚ùå $project/$repo@${digest:0:19}... - –û—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è, –ø–æ–ø—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑"
                return 0  # –ü–æ–ø—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑
                ;;
            *)
                echo "‚ÑπÔ∏è  $project/$repo@${digest:0:19}... - –°—Ç–∞—Ç—É—Å: $status"
                return 0  # –ü–æ–ø—Ä–æ–±—É–µ–º –∑–∞–ø—É—Å—Ç–∏—Ç—å
                ;;
        esac
    else
        echo "‚ö†Ô∏è  $project/$repo@${digest:0:19}... - –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏"
        return 0  # –ó–∞–ø—É—Å—Ç–∏–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
scan_project() {
    local project_name=$1
    
    echo "üîç –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –æ–±—Ä–∞–∑–æ–≤ –≤ –ø—Ä–æ–µ–∫—Ç–µ: $project_name"
    if [ "$FORCE_SCAN" = true ]; then
        echo "üîÑ –†–µ–∂–∏–º: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ"
    else
        echo "üîÑ –†–µ–∂–∏–º: –û–±—ã—á–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ (–ø—Ä–æ–ø—É—Å–∫ —É–∂–µ –æ—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö)"
    fi
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø—Ä–æ–µ–∫—Ç
    project_exists=$(curl -s -H "Authorization: Basic $AUTH_TOKEN" "$HARBOR_URL/api/v2.0/projects" | jq -r --arg project "$project_name" '.[] | select(.name == $project) | .name')
    
    if [ -z "$project_exists" ]; then
        echo "‚ùå –ü—Ä–æ–µ–∫—Ç '$project_name' –Ω–µ –Ω–∞–π–¥–µ–Ω!"
        echo ""
        echo "–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã:"
        curl -s -H "Authorization: Basic $AUTH_TOKEN" "$HARBOR_URL/api/v2.0/projects" | jq -r '.[].name'
        return 1
    fi
    
    echo "üèóÔ∏è  –ü—Ä–æ–µ–∫—Ç: $project_name"
    
    # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
    repos=$(get_all_paginated "$HARBOR_URL/api/v2.0/projects/$project_name/repositories" | jq -r '.name')
    
    if [ -z "$repos" ]; then
        echo "‚ùå –í –ø—Ä–æ–µ–∫—Ç–µ '$project_name' –Ω–µ—Ç —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤!"
        return 1
    fi
    
    total_scanned=0
    already_scanned=0
    errors=0
    
    for repo in $repos; do
        repo_name=$(echo $repo | sed "s/$project_name\///")
        echo ""
        echo "  üì¶ –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π: $repo_name"
        
        # –ü–æ–ª—É—á–∞–µ–º –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
        artifacts=$(get_all_paginated "$HARBOR_URL/api/v2.0/projects/$project_name/repositories/$repo_name/artifacts" | jq -r '.digest')
        
        if [ -z "$artifacts" ]; then
            echo "    ‚ö†Ô∏è  –í —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ –Ω–µ—Ç –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤"
            continue
        fi
        
        for digest in $artifacts; do
            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
            if check_artifact_scan "$project_name" "$repo_name" "$digest"; then
                # –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
                if scan_artifact "$project_name" "$repo_name" "$digest"; then
                    total_scanned=$((total_scanned + 1))
                else
                    errors=$((errors + 1))
                fi
            else
                already_scanned=$((already_scanned + 1))
            fi
            
            sleep 1  # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
        done
    done
    
    echo ""
    echo "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞ '$project_name':"
    echo "  –ù–æ–≤—ã—Ö —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–π –∑–∞–ø—É—â–µ–Ω–æ: $total_scanned"
    echo "  –£–∂–µ –æ—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ/–≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è: $already_scanned"
    echo "  –û—à–∏–±–æ–∫: $errors"
    echo "  –í—Å–µ–≥–æ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤: $((total_scanned + already_scanned + errors))"
    
    if [ $total_scanned -gt 0 ]; then
        echo ""
        echo "üí° –î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:"
        echo "   ./check_unscanned_images.sh $project_name --all"
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Å–µ—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤
scan_all_projects() {
    echo "üîç –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –æ–±—Ä–∞–∑–æ–≤ –≤–æ –≤—Å–µ—Ö –ø—Ä–æ–µ–∫—Ç–∞—Ö"
    if [ "$FORCE_SCAN" = true ]; then
        echo "üîÑ –†–µ–∂–∏–º: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ"
    else
        echo "üîÑ –†–µ–∂–∏–º: –û–±—ã—á–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ (–ø—Ä–æ–ø—É—Å–∫ —É–∂–µ –æ—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö)"
    fi
    echo "‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –æ—á–µ–Ω—å –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏!"
    echo ""
    echo "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (yes/no)"
    read -r confirmation
    
    if [ "$confirmation" != "yes" ]; then
        echo "‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"
        exit 0
    fi
    
    echo "üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ..."
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø—Ä–æ–µ–∫—Ç—ã —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
    projects=$(get_all_paginated "$HARBOR_URL/api/v2.0/projects" | jq -r '.name')
    
    if [ -z "$projects" ]; then
        echo "‚ùå –ü—Ä–æ–µ–∫—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
        return 1
    fi
    
    total_stats=0
    project_count=0
    
    for project in $projects; do
        echo ""
        echo "=========================================="
        scan_project "$project"
        project_count=$((project_count + 1))
    done
    
    echo ""
    echo "üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:"
    echo "  –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –ø—Ä–æ–µ–∫—Ç–æ–≤: $project_count"
    echo "  –í—Å–µ–≥–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–π: $total_stats"
}

# –ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
SCAN_ALL=false
FORCE_SCAN=false
PROJECT_NAME=""

while [[ $# -gt 0 ]]; do
    case $1 in
        --all|-a)
            SCAN_ALL=true
            shift
            ;;
        --force|-f)
            FORCE_SCAN=true
            shift
            ;;
        --help|-h)
            show_help
            exit 0
            ;;
        -*)
            echo "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ–ø—Ü–∏—è: $1"
            echo "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ $0 --help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏"
            exit 1
            ;;
        *)
            if [ -z "$PROJECT_NAME" ]; then
                PROJECT_NAME="$1"
            else
                echo "‚ùå –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤"
                echo "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ $0 --help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏"
                exit 1
            fi
            shift
            ;;
    esac
done

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã
if [ "$SCAN_ALL" = true ] && [ -n "$PROJECT_NAME" ]; then
    echo "‚ùå –û—à–∏–±–∫–∞: –ù–µ–ª—å–∑—è —É–∫–∞–∑–∞—Ç—å –∏ --all –∏ –∏–º—è –ø—Ä–æ–µ–∫—Ç–∞ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ"
    echo "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ $0 --help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏"
    exit 1
fi

if [ "$SCAN_ALL" = false ] && [ -z "$PROJECT_NAME" ]; then
    echo "‚ùå –û—à–∏–±–∫–∞: –£–∫–∞–∂–∏—Ç–µ –∏–º—è –ø—Ä–æ–µ–∫—Ç–∞ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ --all"
    echo "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ $0 --help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏"
    exit 1
fi

# –ó–∞–ø—É—Å–∫–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é
if [ "$SCAN_ALL" = true ]; then
    scan_all_projects
else
    scan_project "$PROJECT_NAME"
fi

echo ""
echo "‚úÖ –ì–æ—Ç–æ–≤–æ!"
