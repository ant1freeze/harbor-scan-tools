#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤ –∏–∑ Harbor Registry
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç Harbor REST API v2.0
"""

import requests
import json
import sys
from urllib.parse import urljoin
import argparse
from typing import List, Dict, Any

class HarborClient:
    def __init__(self, base_url: str, username: str = "admin", password: str = "Harbor12345"):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ Harbor
        
        Args:
            base_url: –ë–∞–∑–æ–≤—ã–π URL Harbor (–Ω–∞–ø—Ä–∏–º–µ—Ä, http://localhost)
            username: –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é admin)
            password: –ü–∞—Ä–æ–ª—å (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é Harbor12345)
        """
        self.base_url = base_url.rstrip('/')
        self.username = username
        self.password = password
        self.session = requests.Session()
        self.session.auth = (username, password)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        self._test_connection()
    
    def _test_connection(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Harbor"""
        try:
            response = self.session.get(f"{self.base_url}/api/v2.0/systeminfo")
            if response.status_code == 200:
                print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Harbor: {self.base_url}")
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Harbor: {response.status_code}")
                sys.exit(1)
        except requests.exceptions.RequestException as e:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Harbor: {e}")
            sys.exit(1)
    
    def get_all_projects(self, page_size: int = 100) -> List[Dict[str, Any]]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –ø—Ä–æ–µ–∫—Ç—ã –∏–∑ Harbor
        
        Args:
            page_size: –†–∞–∑–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
            
        Returns:
            –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤
        """
        all_projects = []
        page = 1
        
        while True:
            url = f"{self.base_url}/api/v2.0/projects"
            params = {
                'page': page,
                'page_size': page_size,
                'with_detail': 'true'  # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            }
            
            try:
                response = self.session.get(url, params=params)
                response.raise_for_status()
                
                data = response.json()
                # Harbor API v2.0 –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤ –Ω–∞–ø—Ä—è–º—É—é
                if isinstance(data, list):
                    projects = data
                else:
                    projects = data.get('projects', [])
                
                if not projects:
                    break
                
                all_projects.extend(projects)
                print(f"üìÑ –ó–∞–≥—Ä—É–∂–µ–Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page}, –ø–æ–ª—É—á–µ–Ω–æ –ø—Ä–æ–µ–∫—Ç–æ–≤: {len(projects)}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –µ—â–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                if len(projects) < page_size:
                    break
                    
                page += 1
                
            except requests.exceptions.RequestException as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ–µ–∫—Ç–æ–≤: {e}")
                break
        
        return all_projects
    
    def get_project_repositories(self, project_name: str) -> List[Dict[str, Any]]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ –≤ –ø—Ä–æ–µ–∫—Ç–µ
        
        Args:
            project_name: –ò–º—è –ø—Ä–æ–µ–∫—Ç–∞
            
        Returns:
            –°–ø–∏—Å–æ–∫ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤ –≤ –ø—Ä–æ–µ–∫—Ç–µ
        """
        url = f"{self.base_url}/api/v2.0/projects/{project_name}/repositories"
        
        try:
            response = self.session.get(url)
            response.raise_for_status()
            return response.json()
        except requests.exceptions.RequestException as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ {project_name}: {e}")
            return []
    
    def get_repository_artifacts(self, project_name: str, repository_name: str) -> List[Dict[str, Any]]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã (–æ–±—Ä–∞–∑—ã) –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏
        
        Args:
            project_name: –ò–º—è –ø—Ä–æ–µ–∫—Ç–∞
            repository_name: –ò–º—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
            
        Returns:
            –°–ø–∏—Å–æ–∫ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤ –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏
        """
        # –£–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å –ø—Ä–æ–µ–∫—Ç–∞ –∏–∑ –∏–º–µ–Ω–∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
        repo_name = repository_name.replace(f"{project_name}/", "")
        url = f"{self.base_url}/api/v2.0/projects/{project_name}/repositories/{repo_name}/artifacts"
        
        try:
            response = self.session.get(url)
            response.raise_for_status()
            return response.json()
        except requests.exceptions.RequestException as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤ –¥–ª—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è {repository_name}: {e}")
            return []
    
    def print_projects_summary(self, projects: List[Dict[str, Any]]):
        """–í—ã–≤–æ–¥–∏—Ç –∫—Ä–∞—Ç–∫—É—é —Å–≤–æ–¥–∫—É –ø–æ –ø—Ä–æ–µ–∫—Ç–∞–º"""
        print(f"\nüìä –°–≤–æ–¥–∫–∞ –ø–æ –ø—Ä–æ–µ–∫—Ç–∞–º:")
        print(f"–í—Å–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–æ–≤: {len(projects)}")
        
        if not projects:
            print("–ü—Ä–æ–µ–∫—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
        
        print(f"\n{'‚Ññ':<3} {'–ù–∞–∑–≤–∞–Ω–∏–µ':<30} {'–ü—É–±–ª–∏—á–Ω—ã–π':<10} {'–°–æ–∑–¥–∞–Ω':<20} {'–û–±–Ω–æ–≤–ª–µ–Ω':<20}")
        print("-" * 90)
        
        for i, project in enumerate(projects, 1):
            name = project.get('name', 'N/A')
            is_public = '–î–∞' if project.get('metadata', {}).get('public') == 'true' else '–ù–µ—Ç'
            created = project.get('creation_time', 'N/A')[:19] if project.get('creation_time') else 'N/A'
            updated = project.get('update_time', 'N/A')[:19] if project.get('update_time') else 'N/A'
            
            print(f"{i:<3} {name:<30} {is_public:<10} {created:<20} {updated:<20}")
    
    def print_detailed_projects(self, projects: List[Dict[str, Any]]):
        """–í—ã–≤–æ–¥–∏—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –ø—Ä–æ–µ–∫—Ç–∞–º"""
        print(f"\nüìã –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –ø—Ä–æ–µ–∫—Ç–∞–º:")
        
        for i, project in enumerate(projects, 1):
            print(f"\n--- –ü—Ä–æ–µ–∫—Ç {i}: {project.get('name', 'N/A')} ---")
            print(f"ID: {project.get('project_id', 'N/A')}")
            print(f"–ù–∞–∑–≤–∞–Ω–∏–µ: {project.get('name', 'N/A')}")
            print(f"–ü—É–±–ª–∏—á–Ω—ã–π: {'–î–∞' if project.get('metadata', {}).get('public') == 'true' else '–ù–µ—Ç'}")
            print(f"–°–æ–∑–¥–∞–Ω: {project.get('creation_time', 'N/A')}")
            print(f"–û–±–Ω–æ–≤–ª–µ–Ω: {project.get('update_time', 'N/A')}")
            print(f"–û–ø–∏—Å–∞–Ω–∏–µ: {project.get('metadata', {}).get('description', '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è')}")
            
            # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞
            repos = self.get_project_repositories(project.get('name', ''))
            print(f"–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤: {len(repos)}")
            
            if repos:
                print("–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏:")
                for repo in repos:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏
                    print(f"  - {repo.get('name', 'N/A')}")
            else:
                print("–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏: –ù–µ—Ç —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤")
    
    def print_repositories_only(self, projects: List[Dict[str, Any]]):
        """–í—ã–≤–æ–¥–∏—Ç —Ç–æ–ª—å–∫–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞"""
        print(f"\nüì¶ –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ –ø–æ –ø—Ä–æ–µ–∫—Ç–∞–º:")
        
        for project in projects:
            project_name = project.get('name', 'N/A')
            print(f"\n--- –ü—Ä–æ–µ–∫—Ç: {project_name} ---")
            
            # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞
            repos = self.get_project_repositories(project_name)
            print(f"–í—Å–µ–≥–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤: {len(repos)}")
            
            if repos:
                for i, repo in enumerate(repos, 1):
                    repo_name = repo.get('name', 'N/A')
                    artifact_count = repo.get('artifact_count', 0)
                    print(f"  {i:2d}. {repo_name} (–∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤: {artifact_count})")
            else:
                print("  –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
    
    def print_all_artifacts(self, projects: List[Dict[str, Any]]):
        """–í—ã–≤–æ–¥–∏—Ç –≤—Å–µ –æ–±—Ä–∞–∑—ã (–∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã) –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è"""
        print(f"\nüê≥ –û–±—Ä–∞–∑—ã –ø–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è–º:")
        
        total_artifacts = 0
        
        for project in projects:
            project_name = project.get('name', 'N/A')
            print(f"\n--- –ü—Ä–æ–µ–∫—Ç: {project_name} ---")
            
            # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞
            repos = self.get_project_repositories(project_name)
            
            if not repos:
                print("  –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                continue
            
            for repo in repos:
                repo_name = repo.get('name', 'N/A')
                print(f"\n  üì¶ –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π: {repo_name}")
                
                # –ü–æ–ª—É—á–∞–µ–º –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã –¥–ª—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
                artifacts = self.get_repository_artifacts(project_name, repo_name)
                print(f"    –í—Å–µ–≥–æ –æ–±—Ä–∞–∑–æ–≤: {len(artifacts)}")
                
                if artifacts:
                    for i, artifact in enumerate(artifacts, 1):
                        digest = artifact.get('digest', 'N/A')[:19] + '...' if artifact.get('digest') else 'N/A'
                        size = artifact.get('size', 0)
                        size_mb = size / (1024 * 1024) if size > 0 else 0
                        created = artifact.get('push_time', 'N/A')
                        if created and created != 'N/A':
                            created = created[:19].replace('T', ' ')
                        
                        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–≥–∏
                        tags = artifact.get('tags', [])
                        tag_info = f" (—Ç–µ–≥–∏: {', '.join([tag.get('name', '') for tag in tags])})" if tags else " (–±–µ–∑ —Ç–µ–≥–æ–≤)"
                        
                        print(f"    {i:2d}. {digest}{tag_info}")
                        print(f"        –†–∞–∑–º–µ—Ä: {size_mb:.1f} MB, –°–æ–∑–¥–∞–Ω: {created}")
                        
                        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É—è–∑–≤–∏–º–æ—Å—Ç–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
                        vulnerability_summary = artifact.get('extra_attrs', {}).get('vulnerabilities', {})
                        if vulnerability_summary:
                            total_vulns = vulnerability_summary.get('total', 0)
                            if total_vulns > 0:
                                high = vulnerability_summary.get('summary', {}).get('high', 0)
                                medium = vulnerability_summary.get('summary', {}).get('medium', 0)
                                low = vulnerability_summary.get('summary', {}).get('low', 0)
                                print(f"        –£—è–∑–≤–∏–º–æ—Å—Ç–∏: {total_vulns} (H:{high} M:{medium} L:{low})")
                else:
                    print("    –û–±—Ä–∞–∑—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                
                total_artifacts += len(artifacts)
        
        print(f"\nüìä –ò—Ç–æ–≥–æ –æ–±—Ä–∞–∑–æ–≤ –≤–æ –≤—Å–µ—Ö —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è—Ö: {total_artifacts}")

def main():
    parser = argparse.ArgumentParser(description='–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–æ–≤ –∏–∑ Harbor Registry')
    parser.add_argument('--url', default='http://localhost:8080', 
                       help='URL Harbor (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: http://localhost:8080)')
    parser.add_argument('--username', default='admin', 
                       help='–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: admin)')
    parser.add_argument('--password', default='Harbor12345', 
                       help='–ü–∞—Ä–æ–ª—å (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: Harbor12345)')
    parser.add_argument('--detailed', action='store_true', 
                       help='–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –ø—Ä–æ–µ–∫—Ç–∞–º')
    parser.add_argument('--repos-only', action='store_true', 
                       help='–ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞')
    parser.add_argument('--artifacts', action='store_true', 
                       help='–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –æ–±—Ä–∞–∑—ã (–∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã) –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è')
    parser.add_argument('--output', choices=['json', 'table'], default='table',
                       help='–§–æ—Ä–º–∞—Ç –≤—ã–≤–æ–¥–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: table)')
    parser.add_argument('--save', help='–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ñ–∞–π–ª')
    
    args = parser.parse_args()
    
    try:
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç Harbor
        harbor = HarborClient(args.url, args.username, args.password)
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø—Ä–æ–µ–∫—Ç—ã
        print("üîç –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–æ–≤ –∏–∑ Harbor...")
        projects = harbor.get_all_projects()
        
        if args.output == 'json':
            # –í—ã–≤–æ–¥–∏–º –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON
            result = {
                'harbor_url': args.url,
                'total_projects': len(projects),
                'projects': projects
            }
            output = json.dumps(result, indent=2, ensure_ascii=False)
            print(output)
        else:
            # –í—ã–≤–æ–¥–∏–º –≤ —Ç–∞–±–ª–∏—á–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
            if args.artifacts:
                harbor.print_all_artifacts(projects)
            elif args.repos_only:
                harbor.print_repositories_only(projects)
            elif args.detailed:
                harbor.print_detailed_projects(projects)
            else:
                harbor.print_projects_summary(projects)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–æ
        if args.save:
            with open(args.save, 'w', encoding='utf-8') as f:
                if args.output == 'json':
                    f.write(output)
                else:
                    f.write(f"Harbor URL: {args.url}\n")
                    f.write(f"–í—Å–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–æ–≤: {len(projects)}\n\n")
                    for i, project in enumerate(projects, 1):
                        f.write(f"{i}. {project.get('name', 'N/A')}\n")
            print(f"üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–∞–π–ª: {args.save}")
        
        print(f"\n‚úÖ –ì–æ—Ç–æ–≤–æ! –ü–æ–ª—É—á–µ–Ω–æ –ø—Ä–æ–µ–∫—Ç–æ–≤: {len(projects)}")
        
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è  –û–ø–µ—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()
