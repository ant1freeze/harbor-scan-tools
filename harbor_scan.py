#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –æ–±—Ä–∞–∑–æ–≤ –≤ Harbor Registry
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç Harbor REST API v2.0 –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π
"""

import requests
import json
import sys
import time
import argparse
from typing import List, Dict, Any, Optional
from urllib.parse import quote

class HarborScanner:
    def __init__(self, base_url: str, username: str = "admin", password: str = "Harbor12345"):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ Harbor Scanner
        
        Args:
            base_url: –ë–∞–∑–æ–≤—ã–π URL Harbor (–Ω–∞–ø—Ä–∏–º–µ—Ä, http://localhost:8080)
            username: –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é admin)
            password: –ü–∞—Ä–æ–ª—å (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é Harbor12345)
        """
        self.base_url = base_url.rstrip('/')
        self.username = username
        self.password = password
        self.session = requests.Session()
        self.session.auth = (username, password)
        
        # –ü–æ–ª—É—á–∞–µ–º CSRF —Ç–æ–∫–µ–Ω
        self._get_csrf_token()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        self._test_connection()
    
    def _get_csrf_token(self):
        """–ü–æ–ª—É—á–∞–µ—Ç CSRF —Ç–æ–∫–µ–Ω –æ—Ç Harbor"""
        try:
            response = self.session.get(f"{self.base_url}/c/login")
            if response.status_code == 200:
                # –ò–∑–≤–ª–µ–∫–∞–µ–º CSRF —Ç–æ–∫–µ–Ω –∏–∑ HTML
                import re
                csrf_match = re.search(r'name="csrf_token"\s+value="([^"]+)"', response.text)
                if csrf_match:
                    self.csrf_token = csrf_match.group(1)
                    print(f"‚úÖ CSRF —Ç–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω")
                else:
                    print("‚ö†Ô∏è  CSRF —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–æ–ø—Ä–æ–±—É–µ–º –±–µ–∑ –Ω–µ–≥–æ")
                    self.csrf_token = None
            else:
                print("‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å CSRF —Ç–æ–∫–µ–Ω")
                self.csrf_token = None
        except Exception as e:
            print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è CSRF —Ç–æ–∫–µ–Ω–∞: {e}")
            self.csrf_token = None
    
    def _test_connection(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Harbor"""
        try:
            response = self.session.get(f"{self.base_url}/api/v2.0/systeminfo")
            if response.status_code == 200:
                print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Harbor: {self.base_url}")
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Harbor: {response.status_code}")
                sys.exit(1)
        except requests.exceptions.RequestException as e:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Harbor: {e}")
            sys.exit(1)
    
    def get_all_projects(self) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –ø—Ä–æ–µ–∫—Ç—ã –∏–∑ Harbor"""
        all_projects = []
        page = 1
        
        while True:
            url = f"{self.base_url}/api/v2.0/projects"
            params = {'page': page, 'page_size': 100}
            
            try:
                response = self.session.get(url, params=params)
                response.raise_for_status()
                
                data = response.json()
                if isinstance(data, list):
                    projects = data
                else:
                    projects = data.get('projects', [])
                
                if not projects:
                    break
                
                all_projects.extend(projects)
                page += 1
                
            except requests.exceptions.RequestException as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ–µ–∫—Ç–æ–≤: {e}")
                break
        
        return all_projects
    
    def get_project_repositories(self, project_name: str) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ –≤ –ø—Ä–æ–µ–∫—Ç–µ"""
        url = f"{self.base_url}/api/v2.0/projects/{project_name}/repositories"
        
        try:
            response = self.session.get(url)
            response.raise_for_status()
            return response.json()
        except requests.exceptions.RequestException as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ {project_name}: {e}")
            return []
    
    def get_repository_artifacts(self, project_name: str, repository_name: str) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏"""
        repo_name = repository_name.replace(f"{project_name}/", "")
        url = f"{self.base_url}/api/v2.0/projects/{project_name}/repositories/{repo_name}/artifacts"
        
        try:
            response = self.session.get(url)
            response.raise_for_status()
            return response.json()
        except requests.exceptions.RequestException as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤ –¥–ª—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è {repository_name}: {e}")
            return []
    
    def scan_artifact(self, project_name: str, repository_name: str, artifact_digest: str) -> bool:
        """
        –ó–∞–ø—É—Å–∫–∞–µ—Ç —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞
        
        Args:
            project_name: –ò–º—è –ø—Ä–æ–µ–∫—Ç–∞
            repository_name: –ò–º—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
            artifact_digest: Digest –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞
            
        Returns:
            True –µ—Å–ª–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ
        """
        repo_name = repository_name.replace(f"{project_name}/", "")
        url = f"{self.base_url}/api/v2.0/projects/{project_name}/repositories/{repo_name}/artifacts/{artifact_digest}/scan"
        
        # –î–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
        data = {}
        
        try:
            response = self.session.post(url, json=data)
            print(f"üîç –û—Ç–≤–µ—Ç API: {response.status_code}")
            if response.status_code == 202:
                print(f"‚úÖ –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ –¥–ª—è {repository_name}@{artifact_digest[:19]}...")
                return True
            elif response.status_code == 409:
                print(f"‚ö†Ô∏è  –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –¥–ª—è {repository_name}@{artifact_digest[:19]}...")
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è {repository_name}: {response.status_code}")
                print(f"–û—Ç–≤–µ—Ç: {response.text}")
                print(f"URL: {url}")
                return False
        except requests.exceptions.RequestException as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è {repository_name}: {e}")
            return False
    
    def get_scan_report(self, project_name: str, repository_name: str, artifact_digest: str) -> Optional[Dict[str, Any]]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –æ—Ç—á–µ—Ç –æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞
        
        Args:
            project_name: –ò–º—è –ø—Ä–æ–µ–∫—Ç–∞
            repository_name: –ò–º—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
            artifact_digest: Digest –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞
            
        Returns:
            –û—Ç—á–µ—Ç –æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ –∏–ª–∏ None –µ—Å–ª–∏ –æ—à–∏–±–∫–∞
        """
        repo_name = repository_name.replace(f"{project_name}/", "")
        url = f"{self.base_url}/api/v2.0/projects/{project_name}/repositories/{repo_name}/artifacts/{artifact_digest}/scan"
        
        try:
            response = self.session.get(url)
            if response.status_code == 200:
                return response.json()
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞ –¥–ª—è {repository_name}: {response.status_code}")
                return None
        except requests.exceptions.RequestException as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞ –¥–ª—è {repository_name}: {e}")
            return None
    
    def wait_for_scan_completion(self, project_name: str, repository_name: str, artifact_digest: str, timeout: int = 300) -> bool:
        """
        –û–∂–∏–¥–∞–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        
        Args:
            project_name: –ò–º—è –ø—Ä–æ–µ–∫—Ç–∞
            repository_name: –ò–º—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
            artifact_digest: Digest –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞
            timeout: –¢–∞–π–º–∞—É—Ç –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
            
        Returns:
            True –µ—Å–ª–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ
        """
        print(f"‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è {repository_name}@{artifact_digest[:19]}...")
        
        start_time = time.time()
        while time.time() - start_time < timeout:
            report = self.get_scan_report(project_name, repository_name, artifact_digest)
            if report:
                status = report.get('status', '')
                if status == 'Success':
                    print(f"‚úÖ –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –¥–ª—è {repository_name}@{artifact_digest[:19]}...")
                    return True
                elif status == 'Error':
                    print(f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è {repository_name}@{artifact_digest[:19]}...")
                    return False
                elif status == 'Running':
                    print(f"üîÑ –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è... ({int(time.time() - start_time)}—Å)")
                else:
                    print(f"‚ÑπÔ∏è  –°—Ç–∞—Ç—É—Å —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {status}")
            
            time.sleep(5)
        
        print(f"‚è∞ –¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è {repository_name}@{artifact_digest[:19]}...")
        return False
    
    def print_scan_report(self, report: Dict[str, Any], repository_name: str, artifact_digest: str):
        """–í—ã–≤–æ–¥–∏—Ç –æ—Ç—á–µ—Ç –æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏"""
        print(f"\nüìä –û—Ç—á–µ—Ç –æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏: {repository_name}@{artifact_digest[:19]}...")
        print("=" * 80)
        
        # –û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        status = report.get('status', 'Unknown')
        print(f"–°—Ç–∞—Ç—É—Å: {status}")
        
        if 'end_time' in report:
            print(f"–í—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: {report['end_time']}")
        
        # –°–≤–æ–¥–∫–∞ –ø–æ —É—è–∑–≤–∏–º–æ—Å—Ç—è–º
        summary = report.get('summary', {})
        if summary:
            total = summary.get('total', 0)
            high = summary.get('high', 0)
            medium = summary.get('medium', 0)
            low = summary.get('low', 0)
            critical = summary.get('critical', 0)
            unknown = summary.get('unknown', 0)
            
            print(f"\nüîç –°–≤–æ–¥–∫–∞ –ø–æ —É—è–∑–≤–∏–º–æ—Å—Ç—è–º:")
            print(f"  –í—Å–µ–≥–æ: {total}")
            print(f"  –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ: {critical}")
            print(f"  –í—ã—Å–æ–∫–∏–µ: {high}")
            print(f"  –°—Ä–µ–¥–Ω–∏–µ: {medium}")
            print(f"  –ù–∏–∑–∫–∏–µ: {low}")
            print(f"  –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ: {unknown}")
        
        # –î–µ—Ç–∞–ª–∏ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π
        vulnerabilities = report.get('vulnerabilities', [])
        if vulnerabilities:
            print(f"\nüö® –î–µ—Ç–∞–ª–∏ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π:")
            for i, vuln in enumerate(vulnerabilities[:10], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
                severity = vuln.get('severity', 'Unknown')
                package = vuln.get('package', 'Unknown')
                version = vuln.get('version', 'Unknown')
                cve_id = vuln.get('id', 'Unknown')
                description = vuln.get('description', '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è')[:100] + '...' if vuln.get('description') else '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è'
                
                print(f"  {i:2d}. [{severity}] {cve_id}")
                print(f"      –ü–∞–∫–µ—Ç: {package} {version}")
                print(f"      –û–ø–∏—Å–∞–Ω–∏–µ: {description}")
                print()
            
            if len(vulnerabilities) > 10:
                print(f"  ... –∏ –µ—â–µ {len(vulnerabilities) - 10} —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π")
    
    def scan_all_artifacts_in_project(self, project_name: str, wait_for_completion: bool = False) -> Dict[str, Any]:
        """
        –°–∫–∞–Ω–∏—Ä—É–µ—Ç –≤—Å–µ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã –≤ –ø—Ä–æ–µ–∫—Ç–µ
        
        Args:
            project_name: –ò–º—è –ø—Ä–æ–µ–∫—Ç–∞
            wait_for_completion: –ñ–¥–∞—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
            
        Returns:
            –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        """
        print(f"üîç –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤ –≤ –ø—Ä–æ–µ–∫—Ç–µ: {project_name}")
        
        stats = {
            'project': project_name,
            'repositories_scanned': 0,
            'artifacts_scanned': 0,
            'scan_requests_sent': 0,
            'scan_errors': 0
        }
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞
        repos = self.get_project_repositories(project_name)
        if not repos:
            print(f"‚ùå –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –ø—Ä–æ–µ–∫—Ç–µ {project_name}")
            return stats
        
        stats['repositories_scanned'] = len(repos)
        
        for repo in repos:
            repo_name = repo.get('name', 'N/A')
            print(f"\nüì¶ –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è: {repo_name}")
            
            # –ü–æ–ª—É—á–∞–µ–º –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
            artifacts = self.get_repository_artifacts(project_name, repo_name)
            if not artifacts:
                print(f"  ‚ö†Ô∏è  –ê—Ä—Ç–µ—Ñ–∞–∫—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                continue
            
            print(f"  –ù–∞–π–¥–µ–Ω–æ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤: {len(artifacts)}")
            
            for artifact in artifacts:
                digest = artifact.get('digest', '')
                if not digest:
                    continue
                
                stats['artifacts_scanned'] += 1
                
                # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
                if self.scan_artifact(project_name, repo_name, digest):
                    stats['scan_requests_sent'] += 1
                    
                    if wait_for_completion:
                        if self.wait_for_scan_completion(project_name, repo_name, digest):
                            # –ü–æ–ª—É—á–∞–µ–º –∏ –≤—ã–≤–æ–¥–∏–º –æ—Ç—á–µ—Ç
                            report = self.get_scan_report(project_name, repo_name, digest)
                            if report:
                                self.print_scan_report(report, repo_name, digest)
                        else:
                            stats['scan_errors'] += 1
                else:
                    stats['scan_errors'] += 1
        
        return stats
    
    def scan_specific_artifact(self, project_name: str, repository_name: str, artifact_digest: str, wait_for_completion: bool = False) -> bool:
        """
        –°–∫–∞–Ω–∏—Ä—É–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –∞—Ä—Ç–µ—Ñ–∞–∫—Ç
        
        Args:
            project_name: –ò–º—è –ø—Ä–æ–µ–∫—Ç–∞
            repository_name: –ò–º—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
            artifact_digest: Digest –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞
            wait_for_completion: –ñ–¥–∞—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
            
        Returns:
            True –µ—Å–ª–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ
        """
        print(f"üîç –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞: {repository_name}@{artifact_digest[:19]}...")
        
        if not self.scan_artifact(project_name, repository_name, artifact_digest):
            return False
        
        if wait_for_completion:
            if self.wait_for_scan_completion(project_name, repository_name, artifact_digest):
                # –ü–æ–ª—É—á–∞–µ–º –∏ –≤—ã–≤–æ–¥–∏–º –æ—Ç—á–µ—Ç
                report = self.get_scan_report(project_name, repository_name, artifact_digest)
                if report:
                    self.print_scan_report(report, repository_name, artifact_digest)
                return True
            else:
                return False
        
        return True

def main():
    parser = argparse.ArgumentParser(description='–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–∑–æ–≤ –≤ Harbor Registry')
    parser.add_argument('--url', default='http://localhost:8080', 
                       help='URL Harbor (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: http://localhost:8080)')
    parser.add_argument('--username', default='admin', 
                       help='–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: admin)')
    parser.add_argument('--password', default='Harbor12345', 
                       help='–ü–∞—Ä–æ–ª—å (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: Harbor12345)')
    parser.add_argument('--project', 
                       help='–°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ')
    parser.add_argument('--repository', 
                       help='–°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ (—Ñ–æ—Ä–º–∞—Ç: project/repository)')
    parser.add_argument('--artifact', 
                       help='–°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –∞—Ä—Ç–µ—Ñ–∞–∫—Ç (—Ñ–æ—Ä–º–∞—Ç: project/repository@digest)')
    parser.add_argument('--all-projects', action='store_true', 
                       help='–°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã –≤–æ –≤—Å–µ—Ö –ø—Ä–æ–µ–∫—Ç–∞—Ö')
    parser.add_argument('--wait', action='store_true', 
                       help='–ñ–¥–∞—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –ø–æ–∫–∞–∑–∞—Ç—å –æ—Ç—á–µ—Ç—ã')
    parser.add_argument('--timeout', type=int, default=300, 
                       help='–¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 300)')
    
    args = parser.parse_args()
    
    try:
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç Harbor Scanner
        scanner = HarborScanner(args.url, args.username, args.password)
        
        if args.artifact:
            # –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞
            if '@' not in args.artifact:
                print("‚ùå –û—à–∏–±–∫–∞: —Ñ–æ—Ä–º–∞—Ç –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å project/repository@digest")
                sys.exit(1)
            
            artifact_part, digest = args.artifact.split('@', 1)
            if '/' not in artifact_part:
                print("‚ùå –û—à–∏–±–∫–∞: —Ñ–æ—Ä–º–∞—Ç –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å project/repository@digest")
                sys.exit(1)
            
            project_name, repo_name = artifact_part.split('/', 1)
            success = scanner.scan_specific_artifact(project_name, repo_name, digest, args.wait)
            
            if success:
                print("‚úÖ –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
            else:
                print("‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞")
                sys.exit(1)
        
        elif args.repository:
            # –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤ –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏
            if '/' not in args.repository:
                print("‚ùå –û—à–∏–±–∫–∞: —Ñ–æ—Ä–º–∞—Ç —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å project/repository")
                sys.exit(1)
            
            project_name, repo_name = args.repository.split('/', 1)
            artifacts = scanner.get_repository_artifacts(project_name, repo_name)
            
            if not artifacts:
                print(f"‚ùå –ê—Ä—Ç–µ—Ñ–∞–∫—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ {args.repository}")
                sys.exit(1)
            
            print(f"üîç –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ {len(artifacts)} –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤ –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ {args.repository}")
            
            success_count = 0
            for artifact in artifacts:
                digest = artifact.get('digest', '')
                if digest and scanner.scan_specific_artifact(project_name, repo_name, digest, args.wait):
                    success_count += 1
            
            print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ: {success_count}/{len(artifacts)}")
        
        elif args.project:
            # –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤ –≤ –ø—Ä–æ–µ–∫—Ç–µ
            stats = scanner.scan_all_artifacts_in_project(args.project, args.wait)
            
            print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞ {args.project}:")
            print(f"  –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤: {stats['repositories_scanned']}")
            print(f"  –ê—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤: {stats['artifacts_scanned']}")
            print(f"  –ó–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {stats['scan_requests_sent']}")
            print(f"  –û—à–∏–±–æ–∫: {stats['scan_errors']}")
        
        elif args.all_projects:
            # –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤ –≤–æ –≤—Å–µ—Ö –ø—Ä–æ–µ–∫—Ç–∞—Ö
            projects = scanner.get_all_projects()
            
            if not projects:
                print("‚ùå –ü—Ä–æ–µ–∫—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                sys.exit(1)
            
            print(f"üîç –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤ –≤ {len(projects)} –ø—Ä–æ–µ–∫—Ç–∞—Ö")
            
            total_stats = {
                'projects_scanned': 0,
                'repositories_scanned': 0,
                'artifacts_scanned': 0,
                'scan_requests_sent': 0,
                'scan_errors': 0
            }
            
            for project in projects:
                project_name = project.get('name', 'N/A')
                stats = scanner.scan_all_artifacts_in_project(project_name, args.wait)
                
                total_stats['projects_scanned'] += 1
                total_stats['repositories_scanned'] += stats['repositories_scanned']
                total_stats['artifacts_scanned'] += stats['artifacts_scanned']
                total_stats['scan_requests_sent'] += stats['scan_requests_sent']
                total_stats['scan_errors'] += stats['scan_errors']
            
            print(f"\nüìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:")
            print(f"  –ü—Ä–æ–µ–∫—Ç–æ–≤: {total_stats['projects_scanned']}")
            print(f"  –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤: {total_stats['repositories_scanned']}")
            print(f"  –ê—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤: {total_stats['artifacts_scanned']}")
            print(f"  –ó–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {total_stats['scan_requests_sent']}")
            print(f"  –û—à–∏–±–æ–∫: {total_stats['scan_errors']}")
        
        else:
            print("‚ùå –£–∫–∞–∂–∏—Ç–µ —á—Ç–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å: --project, --repository, --artifact –∏–ª–∏ --all-projects")
            parser.print_help()
            sys.exit(1)
        
        print("\n‚úÖ –ì–æ—Ç–æ–≤–æ!")
        
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è  –û–ø–µ—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()
